{"version":3,"file":"static/js/823.ec583792.chunk.js","mappings":"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","sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/SectionTitle/SectionTitle.styled.js","components/SectionTitle/SectionTitle.jsx","helpers/yup/validation.schema.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/Filter/Filter.jsx","redux/contacts/selectors.contacts.js","redux/filter/selectors.filter.js","components/CreateContact/CreateContact.jsx","components/EditContact/EditContact .jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const PageWrapper = styled.div`\r\n  margin: 0 auto;\r\n  padding: 0 15px;\r\n  max-width: 1200px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { PageWrapper } from './Container.styled';\r\n\r\nexport default function Container({ children }) {\r\n  return <PageWrapper>{children}</PageWrapper>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import styled from '@emotion/styled';\r\nexport const StyledTitle = styled.h2`\r\n  font-family: 'Permanent Marker', cursive;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n`;\r\n","import { StyledTitle } from './SectionTitle.styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function SectionTitle({ title }) {\r\n  return <StyledTitle>{title}</StyledTitle>;\r\n}\r\n\r\nSectionTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import * as yup from 'yup';\r\n\r\nexport const schemaLogin = yup\r\n  .object({\r\n    email: yup.string().email().required(),\r\n    password: yup.string().min(8).required(),\r\n  })\r\n  .required();\r\n\r\nexport const schemaRegistration = yup\r\n  .object({\r\n    email: yup.string().email().required(),\r\n    password: yup.string().min(8).required(),\r\n    name: yup.string().required(),\r\n  })\r\n  .required();\r\n\r\nexport const schemaContact = yup\r\n  .object({\r\n    name: yup\r\n      .string()\r\n      .matches(\r\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n      )\r\n      .required(),\r\n    number: yup\r\n      .string()\r\n      .matches(\r\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\r\n      )\r\n      .required(),\r\n  })\r\n  .required();\r\n","import styled from '@emotion/styled';\r\nimport { Paper } from '@mui/material';\r\n\r\nexport const ContactCard = styled(Paper)`\r\n  padding: 8px 16.5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const ContactDescription = styled.div`\r\n  font-family: 'Patrick Hand', cursive;\r\n  font-size: 20px;\r\n`;\r\nexport const ContactName = styled.span`\r\n  font-size: 22px;\r\n`;\r\nexport const ContactNumber = styled.span`\r\n  margin-left: 10px;\r\n`;\r\n\r\nexport const ButtonsList = styled.ul`\r\n  display: flex;\r\n  gap: 10px;\r\n`;\r\n","import { useDispatch } from 'react-redux';\r\nimport { MdDelete, MdCallEnd, MdOutlineModeEditOutline } from 'react-icons/md';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { deleteContactThunk } from 'redux/contacts/thunks.contacts';\r\nimport { IconButton } from '@mui/material';\r\nimport {\r\n  ButtonsList,\r\n  ContactCard,\r\n  ContactDescription,\r\n  ContactName,\r\n  ContactNumber,\r\n} from './ContactItem.styled';\r\n\r\nexport default function ContactItem({ name, number, id, onEdit }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDelete = e => {\r\n    dispatch(deleteContactThunk(e.currentTarget.dataset.id));\r\n  };\r\n  const handleEdit = e => {\r\n    onEdit(e.currentTarget.dataset.id);\r\n  };\r\n  return (\r\n    <ContactCard as=\"li\" elevation={3}>\r\n      <ContactDescription data-id={id} onClick={handleEdit}>\r\n        <ContactName>{name}: </ContactName>\r\n        <ContactNumber>{number}</ContactNumber>\r\n      </ContactDescription>\r\n\r\n      <ButtonsList>\r\n        <li>\r\n          <IconButton aria-label=\"call\" color=\"success\" href={`tel: ${number}`}>\r\n            <MdCallEnd />\r\n          </IconButton>\r\n        </li>\r\n        <li>\r\n          <IconButton aria-label=\"edit\" data-id={id} onClick={handleEdit}>\r\n            <MdOutlineModeEditOutline />\r\n          </IconButton>\r\n        </li>\r\n        <li>\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            color=\"error\"\r\n            data-id={id}\r\n            onClick={handleDelete}\r\n          >\r\n            <MdDelete />\r\n          </IconButton>\r\n        </li>\r\n      </ButtonsList>\r\n    </ContactCard>\r\n  );\r\n}\r\nContactItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n  onEdit: PropTypes.func,\r\n};\r\n","import { useDispatch } from 'react-redux';\r\nimport debounce from 'lodash.debounce';\r\nimport { Box, TextField } from '@mui/material';\r\n\r\nimport SectionTitle from 'components/SectionTitle';\r\nimport { getFilter } from 'redux/filter/slise.filter';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const handleChange = e => {\r\n    dispatch(getFilter(e.target.value));\r\n  };\r\n  return (\r\n    <Box sx={{ padding: '10px', mb: '25px' }}>\r\n      <SectionTitle title=\"Filter\" />\r\n      <Box sx={{ textAlign: 'center' }}>\r\n        <TextField\r\n          id=\"standard-basic\"\r\n          label=\"Filter\"\r\n          variant=\"standard\"\r\n          onChange={debounce(handleChange, 300)}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nimport { selectedFilter } from 'redux/filter/selectors.filter';\r\n\r\nexport const selectedContacts = state => state.contacts.items;\r\nexport const selectedAddet = state => state.contacts.addet;\r\n\r\nexport const selectedFiltredContacts = createSelector(\r\n  [selectedContacts, selectedFilter],\r\n  (contacts, request) =>\r\n    contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(request.toLowerCase())\r\n    )\r\n);\r\n","export const selectedFilter = state => state.filter.filter;\r\n","import PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Paper, TextField } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\n\r\nimport { Controller } from 'react-hook-form';\r\nimport { selectedAddet } from 'redux/contacts/selectors.contacts';\r\n\r\nexport default function CreateContact({\r\n  control,\r\n  handleSubmit,\r\n  onSubmit,\r\n  editContacts,\r\n}) {\r\n  const isAddet = useSelector(selectedAddet);\r\n  return (\r\n    <Paper as=\"li\" elevation={3}>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n          }}\r\n        >\r\n          <Box sx={{ width: '75%' }}>\r\n            <Controller\r\n              control={control}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <TextField\r\n                  sx={{ width: '50%' }}\r\n                  {...field}\r\n                  disabled={editContacts}\r\n                  required\r\n                  id=\"outlined-required\"\r\n                  label=\"Name\"\r\n                />\r\n              )}\r\n            />\r\n            <Controller\r\n              control={control}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              render={({ field }) => (\r\n                <TextField\r\n                  sx={{ width: '50%' }}\r\n                  {...field}\r\n                  disabled={editContacts}\r\n                  required\r\n                  id=\"outlined-required\"\r\n                  label=\"Phone Number\"\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n\r\n          <LoadingButton\r\n            sx={{ width: '25%' }}\r\n            type=\"submit\"\r\n            loading={isAddet}\r\n            disabled={isAddet || editContacts}\r\n            variant=\"outlined\"\r\n          >\r\n            Add\r\n          </LoadingButton>\r\n        </Box>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nCreateContact.propTypes = {\r\n  control: PropTypes.object,\r\n  handleSubmit: PropTypes.func,\r\n  onSubmit: PropTypes.func,\r\n  editContacts: PropTypes.bool,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Controller, useForm } from 'react-hook-form';\r\n\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Paper, TextField } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { schemaContact } from 'helpers/yup/validation.schema';\r\n\r\nimport { updateContactThunk } from 'redux/contacts/thunks.contacts';\r\n\r\nexport default function EditContact({ onEdit, id, name, number }) {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schemaContact),\r\n    defaultValues: {\r\n      name,\r\n      number,\r\n    },\r\n  });\r\n  const handleAbortEdit = () => {\r\n    onEdit(false);\r\n  };\r\n\r\n  const handleEditContact = data => {\r\n    dispatch(updateContactThunk({ id, data }));\r\n    onEdit(false);\r\n  };\r\n  const errorMesage = errors.name?.message || errors.number?.message;\r\n  toast.warn(errorMesage);\r\n  return (\r\n    <Paper as=\"li\" elevation={3}>\r\n      <form onSubmit={handleSubmit(handleEditContact)}>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n          }}\r\n        >\r\n          <Box sx={{ width: '75%' }}>\r\n            <Controller\r\n              control={control}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              render={({ field }) => (\r\n                <TextField\r\n                  sx={{ width: '50%' }}\r\n                  {...field}\r\n                  required\r\n                  id=\"outlined-required\"\r\n                  label=\"Name\"\r\n                />\r\n              )}\r\n            />\r\n            <Controller\r\n              control={control}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              render={({ field }) => (\r\n                <TextField\r\n                  sx={{ width: '50%' }}\r\n                  {...field}\r\n                  required\r\n                  id=\"outlined-required\"\r\n                  label=\"Phone Number\"\r\n                />\r\n              )}\r\n            />\r\n          </Box>\r\n          <LoadingButton sx={{ width: '25%' }} type=\"submit\" variant=\"outlined\">\r\n            Edit\r\n          </LoadingButton>\r\n          <LoadingButton\r\n            sx={{ width: '25%' }}\r\n            type=\"button\"\r\n            variant=\"outlined\"\r\n            color=\"error\"\r\n            onClick={handleAbortEdit}\r\n          >\r\n            Back\r\n          </LoadingButton>\r\n        </Box>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nEditContact.propTypes = {\r\n  onEdit: PropTypes.func,\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContactsList = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n\r\n  padding: 25px 0;\r\n`;\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addContactThunk, getContacts } from 'redux/contacts/thunks.contacts';\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport ContactItem from 'components/ContactItem';\r\nimport Container from 'components/Container';\r\nimport Filter from 'components/Filter/Filter';\r\nimport SectionTitle from 'components/SectionTitle';\r\nimport CreateContact from 'components/CreateContact';\r\nimport EditContact from 'components/EditContact';\r\n\r\nimport { ContactsList } from './Contacts.styled';\r\nimport { selectedFiltredContacts } from 'redux/contacts/selectors.contacts';\r\nimport { schemaContact } from 'helpers/yup/validation.schema';\r\n\r\nexport default function Contacts() {\r\n  const [editContacts, setEditContact] = useState();\r\n  const dispatch = useDispatch();\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schemaContact),\r\n    defaultValues: {\r\n      name: '',\r\n      number: '',\r\n    },\r\n  });\r\n  const contacts = useSelector(selectedFiltredContacts);\r\n\r\n  useEffect(() => {\r\n    dispatch(getContacts());\r\n  }, [dispatch]);\r\n\r\n  const onSubmit = data => {\r\n    dispatch(addContactThunk(data));\r\n    reset();\r\n  };\r\n\r\n  const errorMesage = errors.name?.message || errors.number?.message;\r\n  toast.warn(errorMesage);\r\n  return (\r\n    <Container>\r\n      <Filter />\r\n      <section>\r\n        <SectionTitle title=\"contacts\" />\r\n        <ContactsList>\r\n          <CreateContact\r\n            editContacts={!!editContacts}\r\n            control={control}\r\n            handleSubmit={handleSubmit}\r\n            onSubmit={onSubmit}\r\n          />\r\n\r\n          {contacts.map(({ id, name, number }) =>\r\n            editContacts !== id ? (\r\n              <ContactItem\r\n                key={id}\r\n                name={name}\r\n                number={number}\r\n                id={id}\r\n                onEdit={setEditContact}\r\n              />\r\n            ) : (\r\n              <EditContact\r\n                key={id}\r\n                id={id}\r\n                name={name}\r\n                number={number}\r\n                onEdit={setEditContact}\r\n              />\r\n            )\r\n          )}\r\n        </ContactsList>\r\n      </section>\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["PageWrapper","styled","Container","children","StyledTitle","SectionTitle","title","schemaLogin","yup","email","required","password","min","schemaRegistration","name","schemaContact","matches","number","ContactCard","Paper","ContactDescription","ContactName","ContactNumber","ButtonsList","ContactItem","id","onEdit","dispatch","useDispatch","handleEdit","e","currentTarget","dataset","as","elevation","onClick","IconButton","color","href","deleteContactThunk","Filter","Box","sx","padding","mb","textAlign","TextField","label","variant","onChange","debounce","getFilter","target","value","selectedAddet","state","contacts","addet","selectedFiltredContacts","createSelector","items","filter","request","contact","toLowerCase","includes","CreateContact","control","handleSubmit","onSubmit","editContacts","isAddet","useSelector","display","width","type","render","field","disabled","LoadingButton","loading","EditContact","useForm","resolver","yupResolver","defaultValues","errors","formState","errorMesage","message","toast","data","updateContactThunk","ContactsList","Contacts","useState","setEditContact","reset","useEffect","getContacts","addContactThunk","map"],"sourceRoot":""}