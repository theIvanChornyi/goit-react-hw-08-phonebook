{"version":3,"file":"static/js/58.4f5b9f7e.chunk.js","mappings":"2LAEaA,E,QAAcC,EAAAA,IAAH,qF,SCCT,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,SAACH,EAAD,UAAcG,GACtB,C,wFCDc,SAASC,EAAT,GAAqD,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,SAAUH,EAAY,EAAZA,SACrD,OACE,iBAAMG,SAAUD,EAAaC,GAA7B,UACE,UAACC,EAAA,EAAD,CACEC,GAAI,CACFC,EAAG,SACHC,QAAS,OACTC,cAAe,SACfC,SAAU,QACVC,IAAK,QANT,UASGV,GAED,SAACW,EAAA,EAAD,CACEN,GAAI,CAAEC,EAAG,SAAUM,EAAG,QACtBC,KAAK,SACLC,QAAQ,WAHV,wBAUP,C,kGCxBc,SAASC,EAAT,GAA2D,IAAtCC,EAAqC,EAArCA,UAAqC,IAA1BH,KAAAA,OAA0B,MAAnB,OAAmB,EAAXI,EAAW,EAAXA,QAC5D,OACE,SAAC,KAAD,CACEA,QAASA,EACTC,KAAMF,EACNG,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,SAACC,EAAA,GAAD,gBACEC,UAAQ,GACJF,GAFN,IAGEG,GACW,aAATV,EACI,oBACA,0BAENA,KAAMA,EACNW,MAAOR,EACPF,QAAQ,aAXJ,GAgBb,C,sECxBYW,E,QAAc3B,EAAAA,GAAH,+G,SCET,SAAS4B,EAAT,GAAkC,IAAVC,EAAS,EAATA,MACrC,OAAO,SAACF,EAAD,UAAcE,GACtB,C,sHCHYC,EAAcC,EAAAA,GACjB,CACNC,MAAOD,EAAAA,KAAaC,QAAQR,WAC5BS,SAAUF,EAAAA,KAAaG,IAAI,GAAGV,aAE/BA,WAEUW,EAAqBJ,EAAAA,GACxB,CACNC,MAAOD,EAAAA,KAAaC,QAAQR,WAC5BS,SAAUF,EAAAA,KAAaG,IAAI,GAAGV,WAC9BJ,KAAMW,EAAAA,KAAaP,aAEpBA,WAEUY,EAAgBL,EAAAA,GACnB,CACNX,KAAMW,EAAAA,KAEHM,QACC,yHACA,0IAEDb,WACHc,OAAQP,EAAAA,KAELM,QACC,6EACA,gGAEDb,aAEJA,U,4LCnBY,SAASe,IAAgB,IAAD,MACrC,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYP,EAAAA,IACtBQ,cAAe,CACbX,MAAO,GACPC,SAAU,GACVb,KAAM,MATRD,EADF,EACEA,QACAf,EAFF,EAEEA,aACAwC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OASTE,GAAWC,EAAAA,EAAAA,MAKXC,GACJ,UAAAJ,EAAOb,aAAP,eAAckB,WAAd,UAAyBL,EAAOZ,gBAAhC,aAAyB,EAAiBiB,WAA1C,UAAqDL,EAAOzB,YAA5D,aAAqD,EAAa8B,SAGpE,OAFAC,EAAAA,GAAAA,KAAWF,IAGT,8BACE,SAAChD,EAAA,EAAD,WACE,UAACK,EAAA,EAAD,CAAKC,GAAI,CAAEO,EAAG,aAAd,WACE,SAACc,EAAA,EAAD,CAAcC,MAAO,kBACrB,UAAC1B,EAAA,EAAD,CAAMC,aAAcA,EAAcC,SAbzB,SAAA+C,GACfL,GAASM,EAAAA,EAAAA,IAAYD,IACrBR,GACD,EAUO,WACE,SAAC3B,EAAA,EAAD,CAAWE,QAASA,EAASD,UAAU,UACvC,SAACD,EAAA,EAAD,CAAWE,QAASA,EAASJ,KAAK,QAAQG,UAAU,WACpD,SAACD,EAAA,EAAD,CAAWE,QAASA,EAASJ,KAAK,WAAWG,UAAU,sBAMlE,C","sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/Form/Form.jsx","components/FormInput/FormInput.jsx","components/SectionTitle/SectionTitle.styled.js","components/SectionTitle/SectionTitle.jsx","helpers/yup/validation.schema.js","pages/Registration/Registration.jsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const PageWrapper = styled.div`\r\n  margin: 0 auto;\r\n  padding: 0 15px;\r\n  max-width: 1200px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { PageWrapper } from './Container.styled';\r\n\r\nexport default function Container({ children }) {\r\n  return <PageWrapper>{children}</PageWrapper>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Box } from '@mui/system';\r\n\r\nexport default function Form({ handleSubmit, onSubmit, children }) {\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <Box\r\n        sx={{\r\n          m: '0 auto',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          maxWidth: '450px',\r\n          gap: '25px',\r\n        }}\r\n      >\r\n        {children}\r\n\r\n        <LoadingButton\r\n          sx={{ m: '10px 0', p: '10px' }}\r\n          type=\"submit\"\r\n          variant=\"outlined\"\r\n        >\r\n          Log In\r\n        </LoadingButton>\r\n      </Box>\r\n    </form>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  handleSubmit: PropTypes.func,\r\n  onSubmit: PropTypes.func,\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { TextField } from '@mui/material';\r\nimport { Controller } from 'react-hook-form';\r\n\r\nexport default function FormInput({ fieldName, type = 'text', control }) {\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      name={fieldName}\r\n      render={({ field }) => (\r\n        <TextField\r\n          required\r\n          {...field}\r\n          id={\r\n            type !== 'password'\r\n              ? 'standard-required'\r\n              : 'standard-password-input'\r\n          }\r\n          type={type}\r\n          label={fieldName}\r\n          variant=\"standard\"\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\nFormInput.propTypes = {\r\n  fieldName: PropTypes.string,\r\n  type: PropTypes.string,\r\n  control: PropTypes.object,\r\n};\r\n","import styled from '@emotion/styled';\r\nexport const StyledTitle = styled.h2`\r\n  font-family: 'Permanent Marker', cursive;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n`;\r\n","import { StyledTitle } from './SectionTitle.styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function SectionTitle({ title }) {\r\n  return <StyledTitle>{title}</StyledTitle>;\r\n}\r\n\r\nSectionTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import * as yup from 'yup';\r\n\r\nexport const schemaLogin = yup\r\n  .object({\r\n    email: yup.string().email().required(),\r\n    password: yup.string().min(8).required(),\r\n  })\r\n  .required();\r\n\r\nexport const schemaRegistration = yup\r\n  .object({\r\n    email: yup.string().email().required(),\r\n    password: yup.string().min(8).required(),\r\n    name: yup.string().required(),\r\n  })\r\n  .required();\r\n\r\nexport const schemaContact = yup\r\n  .object({\r\n    name: yup\r\n      .string()\r\n      .matches(\r\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\r\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n      )\r\n      .required(),\r\n    number: yup\r\n      .string()\r\n      .matches(\r\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\r\n      )\r\n      .required(),\r\n  })\r\n  .required();\r\n","import { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Container from 'components/Container';\r\nimport SectionTitle from 'components/SectionTitle';\r\nimport Form from 'components/Form';\r\nimport FormInput from 'components/FormInput';\r\n\r\nimport { Box } from '@mui/material';\r\nimport { toast } from 'react-toastify';\r\nimport { schemaRegistration } from 'helpers/yup/validation.schema';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport { signUpThunk } from 'redux/auth/thunks.auth';\r\n\r\nexport default function Registration() {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schemaRegistration),\r\n    defaultValues: {\r\n      email: '',\r\n      password: '',\r\n      name: '',\r\n    },\r\n  });\r\n  const dispatch = useDispatch();\r\n  const onSubmit = data => {\r\n    dispatch(signUpThunk(data));\r\n    reset();\r\n  };\r\n  const errorMesage =\r\n    errors.email?.message || errors.password?.message || errors.name?.message;\r\n  toast.warn(errorMesage);\r\n\r\n  return (\r\n    <section>\r\n      <Container>\r\n        <Box sx={{ p: '25px 10px' }}>\r\n          <SectionTitle title={'Registration'} />\r\n          <Form handleSubmit={handleSubmit} onSubmit={onSubmit}>\r\n            <FormInput control={control} fieldName=\"name\" />\r\n            <FormInput control={control} type=\"email\" fieldName=\"email\" />\r\n            <FormInput control={control} type=\"password\" fieldName=\"password\" />\r\n          </Form>\r\n        </Box>\r\n      </Container>\r\n    </section>\r\n  );\r\n}\r\n"],"names":["PageWrapper","styled","Container","children","Form","handleSubmit","onSubmit","Box","sx","m","display","flexDirection","maxWidth","gap","LoadingButton","p","type","variant","FormInput","fieldName","control","name","render","field","TextField","required","id","label","StyledTitle","SectionTitle","title","schemaLogin","yup","email","password","min","schemaRegistration","schemaContact","matches","number","Registration","useForm","resolver","yupResolver","defaultValues","reset","errors","formState","dispatch","useDispatch","errorMesage","message","toast","data","signUpThunk"],"sourceRoot":""}